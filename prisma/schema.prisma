generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// Players table with Clerk integration
model Player {
  id                       String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clerk_id                 String                     @unique
  email                    String                     @unique
  first_name               String
  last_name                String
  username                 String?                    @unique
  image_url                String?
  external_accounts        Json?
  location                 String?
  bio                      String?
  school                   String?
  school_id                String?                    @db.Uuid
  gpa                      Decimal?                   @db.Decimal(3, 2)
  transcript               String?
  class_year               String?
  graduation_date          String?
  intended_major           String?
  guardian_email           String?
  scholastic_contact       String?
  scholastic_contact_email String?
  extra_curriculars        String?
  academic_bio             String?
  main_game_id             String?                    @db.Uuid
  created_at               DateTime                   @default(now()) @db.Timestamp(6)
  updated_at               DateTime                   @updatedAt
  favorited_by             CoachFavorite[]
  combine_registrations    CombineRegistration[]
  Conversation             Conversation[]
  game_profiles            PlayerGameProfile[]
  league_participations    PlayerLeague[]
  performance_stats        PlayerPerformanceStats[]
  platform_connections     PlayerPlatformConnection[]
  rankings                 PlayerRanking[]
  social_connections       PlayerSocialConnection[]
  main_game                Game?                      @relation("PlayerMainGame", fields: [main_game_id], references: [id])
  school_ref               School?                    @relation(fields: [school_id], references: [id])
  team_memberships         TeamMember[]
  tryout_registrations     TryoutRegistration[]

  @@index([school_id])
  @@index([main_game_id])
  @@index([class_year])
  @@index([created_at])
  @@index([location])
  @@map("players")
}

/// Coaches table with Clerk integration
model Coach {
  id                 String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clerk_id           String                     @unique
  email              String                     @unique
  first_name         String
  last_name          String
  username           String                     @unique
  image_url          String?
  external_accounts  Json?
  school             String
  school_id          String?                    @db.Uuid
  created_at         DateTime                   @default(now()) @db.Timestamp(6)
  updated_at         DateTime                   @updatedAt
  favorites          CoachFavorite[]
  school_ref         School?                    @relation(fields: [school_id], references: [id])
  combines_created   Combine[]
  Conversation       Conversation[]
  school_requests    SchoolAssociationRequest[]
  teams              Team[]
  tryouts_created    Tryout[]
  achievements       CoachAchievement[]
  SchoolAnnouncement SchoolAnnouncement[]

  @@map("coaches")
}

/// Coach achievements for display on public profiles
model CoachAchievement {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  coach_id      String   @db.Uuid
  title         String
  date_achieved DateTime @db.Date
  created_at    DateTime @default(now()) @db.Timestamp(6)
  updated_at    DateTime @updatedAt
  coach         Coach    @relation(fields: [coach_id], references: [id], onDelete: Cascade)

  @@index([coach_id])
  @@index([date_achieved])
  @@map("coach_achievements")
}

/// School association requests for coach onboarding
model SchoolAssociationRequest {
  id                       String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  coach_id                 String                  @db.Uuid
  school_id                String?                 @db.Uuid
  status                   SchoolAssociationStatus @default(PENDING)
  request_message          String?
  admin_notes              String?
  requested_at             DateTime                @default(now()) @db.Timestamp(6)
  reviewed_at              DateTime?               @db.Timestamp(6)
  reviewed_by              String?
  created_at               DateTime                @default(now()) @db.Timestamp(6)
  updated_at               DateTime                @updatedAt
  // New school creation fields
  is_new_school_request    Boolean                 @default(false)
  proposed_school_name     String?
  proposed_school_type     SchoolType?
  proposed_school_location String?
  proposed_school_state    String?
  proposed_school_region   String?
  proposed_school_website  String?
  created_school_id        String?                 @db.Uuid
  coach                    Coach                   @relation(fields: [coach_id], references: [id], onDelete: Cascade)
  school                   School?                 @relation(fields: [school_id], references: [id])
  created_school           School?                 @relation("CreatedSchoolRequests", fields: [created_school_id], references: [id])

  @@index([status])
  @@index([requested_at])
  @@index([is_new_school_request])
  @@map("school_association_requests")
}

/// League administrators who can manage league information
model LeagueAdministrator {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clerk_id          String   @unique
  email             String   @unique
  first_name        String
  last_name         String
  username          String?  @unique
  image_url         String?
  external_accounts Json?
  league            String // Denormalized league name
  league_id         String?  @db.Uuid // Foreign key to League (nullable until association)
  title             String? // Commissioner, Director, Admin, etc.
  created_at        DateTime @default(now()) @db.Timestamp(6)
  updated_at        DateTime @updatedAt

  // Relationships
  league_ref           League?                    @relation(fields: [league_id], references: [id])
  association_requests LeagueAssociationRequest[]

  @@map("league_administrators")
}

/// League association requests (similar to school association)
model LeagueAssociationRequest {
  id                    String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  administrator_id      String                  @db.Uuid
  league_id             String?                 @db.Uuid
  request_message       String
  status                LeagueAssociationStatus @default(PENDING)
  admin_notes           String?
  is_new_league_request Boolean                 @default(false)

  // New league proposal fields
  proposed_league_name        String?
  proposed_league_short_name  String?
  proposed_league_description String?
  proposed_game_ids           Json? // Array of game IDs (existing games)
  proposed_custom_games       Json? // Array of custom game objects {name, short_name, icon?, color?}
  proposed_region             String?
  proposed_state              String?
  proposed_tier               LeagueTier?
  proposed_season             String?
  proposed_format             String?
  proposed_founded_year       Int?

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @updatedAt

  administrator LeagueAdministrator @relation(fields: [administrator_id], references: [id], onDelete: Cascade)
  league        League?             @relation(fields: [league_id], references: [id])
  Game          Game?               @relation(fields: [gameId], references: [id])
  gameId        String?             @db.Uuid

  @@map("league_association_requests")
}

/// Games supported by the platform
model Game {
  id                       String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                     String                     @unique
  short_name               String                     @unique
  icon                     String?
  color                    String?
  is_custom                Boolean                    @default(false) // Distinguishes Eval's official games from custom league games
  created_by_league_id     String?                    @db.Uuid // League that created this custom game
  created_at               DateTime                   @default(now()) @db.Timestamp(6)
  combines                 Combine[]
  league_games             LeagueGame[] // Many-to-many with leagues
  player_profiles          PlayerGameProfile[]
  rankings                 PlayerRanking[]
  main_game_players        Player[]                   @relation("PlayerMainGame")
  teams                    Team[]
  tryouts                  Tryout[]
  created_by_league        League?                    @relation("CustomGamesCreated", fields: [created_by_league_id], references: [id])
  LeagueAssociationRequest LeagueAssociationRequest[]

  @@map("games")
}

/// Player profiles for specific games
model PlayerGameProfile {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  player_id      String   @db.Uuid
  game_id        String   @db.Uuid
  username       String
  rank           String?
  rating         Float?
  role           String?
  agents         String[]
  preferred_maps String[]
  play_style     String?
  combine_score  Float?
  league_score   Float?
  tracker_url    String?
  created_at     DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime @updatedAt
  game           Game     @relation(fields: [game_id], references: [id])
  player         Player   @relation(fields: [player_id], references: [id])

  @@unique([player_id, game_id])
  @@index([player_id, game_id])
  @@map("player_game_profiles")
}

/// Player gaming platform connections (Steam, Battle.net, etc.)
model PlayerPlatformConnection {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  player_id        String   @db.Uuid
  platform         String
  username         String
  connected        Boolean  @default(true)
  oauth_provider   String? // e.g., "oauth_riot" for OAuth connections
  oauth_account_id String? // External account ID from OAuth provider
  created_at       DateTime @default(now()) @db.Timestamp(6)
  updated_at       DateTime @updatedAt
  player           Player   @relation(fields: [player_id], references: [id])

  @@unique([player_id, platform])
  @@map("player_platform_connections")
}

/// Player social media connections
model PlayerSocialConnection {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  player_id  String   @db.Uuid
  platform   String
  username   String
  connected  Boolean  @default(true)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @updatedAt
  player     Player   @relation(fields: [player_id], references: [id])

  @@unique([player_id, platform])
  @@map("player_social_connections")
}

/// Schools (High Schools, Colleges, Universities)
model School {
  id                      String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                    String
  type                    SchoolType
  location                String
  state                   String
  region                  String?
  website                 String?
  logo_url                String?
  banner_url              String? // School banner URL
  bio                     String?
  email                   String?
  phone                   String?
  created_at              DateTime                   @default(now()) @db.Timestamp(6)
  updated_at              DateTime                   @updatedAt
  coaches                 Coach[]
  league_memberships      LeagueSchool[]
  players                 Player[]
  association_requests    SchoolAssociationRequest[]
  created_school_requests SchoolAssociationRequest[] @relation("CreatedSchoolRequests")
  teams                   Team[]
  tryouts                 Tryout[]
  SchoolAnnouncement      SchoolAnnouncement[]

  @@unique([name, type, state])
  @@map("schools")
}

/// Teams representing schools in specific games
model Team {
  id                     String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                   String
  school_id              String       @db.Uuid
  game_id                String       @db.Uuid
  coach_id               String?      @db.Uuid
  tier                   TeamTier     @default(COMPETITIVE)
  active                 Boolean      @default(true)
  created_at             DateTime     @default(now()) @db.Timestamp(6)
  updated_at             DateTime     @updatedAt
  league_participations  LeagueTeam[]
  match_a_participations Match[]      @relation("TeamAMatches")
  match_b_participations Match[]      @relation("TeamBMatches")
  members                TeamMember[]
  coach                  Coach?       @relation(fields: [coach_id], references: [id])
  game                   Game         @relation(fields: [game_id], references: [id])
  school                 School       @relation(fields: [school_id], references: [id])

  @@unique([school_id, game_id, name])
  @@map("teams")
}

/// Team membership tracking
model TeamMember {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  team_id   String    @db.Uuid
  player_id String    @db.Uuid
  role      String?
  position  String?
  joined_at DateTime  @default(now()) @db.Timestamp(6)
  left_at   DateTime?
  active    Boolean   @default(true)
  player    Player    @relation(fields: [player_id], references: [id])
  team      Team      @relation(fields: [team_id], references: [id])

  @@unique([team_id, player_id])
  @@map("team_members")
}

/// Tryouts hosted by schools/coaches
model Tryout {
  id                    String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title                 String
  description           String
  long_description      String?
  game_id               String               @db.Uuid
  school_id             String               @db.Uuid
  coach_id              String?              @db.Uuid
  date                  DateTime             @db.Timestamp(6)
  time_start            String?
  time_end              String?
  location              String
  type                  EventType
  status                TryoutStatus         @default(DRAFT)
  price                 String
  max_spots             Int
  registered_spots      Int                  @default(0)
  registration_deadline DateTime?            @db.Timestamp(6)
  min_gpa               Decimal?             @db.Decimal(3, 2)
  class_years           String[]
  required_roles        String[]
  created_at            DateTime             @default(now()) @db.Timestamp(6)
  updated_at            DateTime             @updatedAt
  registrations         TryoutRegistration[]
  organizer             Coach?               @relation(fields: [coach_id], references: [id])
  game                  Game                 @relation(fields: [game_id], references: [id])
  school                School               @relation(fields: [school_id], references: [id])

  @@map("tryouts")
}

/// Tryout registration tracking
model TryoutRegistration {
  id            String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tryout_id     String             @db.Uuid
  player_id     String             @db.Uuid
  status        RegistrationStatus @default(PENDING)
  registered_at DateTime           @default(now()) @db.Timestamp(6)
  notes         String?
  player        Player             @relation(fields: [player_id], references: [id])
  tryout        Tryout             @relation(fields: [tryout_id], references: [id])

  @@unique([tryout_id, player_id])
  @@map("tryout_registrations")
}

/// Combines for competitive events
model Combine {
  id                    String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title                 String
  description           String
  long_description      String?
  game_id               String                @db.Uuid
  coach_id              String?               @db.Uuid
  date                  DateTime              @db.Timestamp(6)
  time_start            String?
  time_end              String?
  location              String
  type                  EventType
  year                  String
  max_spots             Int
  registered_spots      Int                   @default(0)
  registration_deadline DateTime?             @db.Timestamp(6)
  min_gpa               Decimal?              @db.Decimal(3, 2)
  class_years           String[]
  required_roles        String[]
  prize_pool            String
  format                String?
  status                CombineStatus
  requirements          String
  invite_only           Boolean               @default(false)
  created_at            DateTime              @default(now()) @db.Timestamp(6)
  updated_at            DateTime              @updatedAt
  registrations         CombineRegistration[]
  organizer             Coach?                @relation(fields: [coach_id], references: [id])
  game                  Game                  @relation(fields: [game_id], references: [id])

  @@map("combines")
}

/// Combine registration tracking
model CombineRegistration {
  id            String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  combine_id    String             @db.Uuid
  player_id     String             @db.Uuid
  status        RegistrationStatus @default(PENDING)
  qualified     Boolean            @default(false)
  registered_at DateTime           @default(now()) @db.Timestamp(6)
  combine       Combine            @relation(fields: [combine_id], references: [id])
  player        Player             @relation(fields: [player_id], references: [id])

  @@unique([combine_id, player_id])
  @@map("combine_registrations")
}

/// Competitive leagues
model League {
  id                   String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String
  short_name           String
  description          String
  logo_url             String? // League logo URL
  banner_url           String? // League banner URL
  region               String
  state                String?
  tier                 LeagueTier
  season               String
  status               LeagueStatus
  format               String?
  prize_pool           String?
  founded_year         Int?
  created_at           DateTime                   @default(now()) @db.Timestamp(6)
  updated_at           DateTime                   @updatedAt
  schools              LeagueSchool[]
  teams                LeagueTeam[]
  league_games         LeagueGame[] // Many-to-many with games
  matches              Match[]
  player_participants  PlayerLeague[]
  administrators       LeagueAdministrator[]
  association_requests LeagueAssociationRequest[]
  custom_games_created Game[]                     @relation("CustomGamesCreated")

  @@unique([name, season])
  @@map("leagues")
}

/// League-Game many-to-many relationship
model LeagueGame {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  league_id String   @db.Uuid
  game_id   String   @db.Uuid
  added_at  DateTime @default(now()) @db.Timestamp(6)
  league    League   @relation(fields: [league_id], references: [id], onDelete: Cascade)
  game      Game     @relation(fields: [game_id], references: [id], onDelete: Cascade)

  @@unique([league_id, game_id])
  @@map("league_games")
}

/// League team participation
model LeagueTeam {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  league_id String   @db.Uuid
  team_id   String   @db.Uuid
  season    String
  joined_at DateTime @default(now()) @db.Timestamp(6)
  wins      Int      @default(0)
  losses    Int      @default(0)
  points    Int      @default(0)
  league    League   @relation(fields: [league_id], references: [id])
  team      Team     @relation(fields: [team_id], references: [id])

  @@unique([league_id, team_id, season])
  @@map("league_teams")
}

/// League school memberships
model LeagueSchool {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  league_id String   @db.Uuid
  school_id String   @db.Uuid
  season    String
  joined_at DateTime @default(now()) @db.Timestamp(6)
  league    League   @relation(fields: [league_id], references: [id])
  school    School   @relation(fields: [school_id], references: [id])

  @@unique([league_id, school_id, season])
  @@map("league_schools")
}

/// Player participation in leagues with their performance data
model PlayerLeague {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  player_id    String   @db.Uuid
  league_id    String   @db.Uuid
  season       String
  joined_at    DateTime @default(now()) @db.Timestamp(6)
  eval_score   Float?
  main_agent   String?
  role         String?
  rank         String?
  wins         Int      @default(0)
  losses       Int      @default(0)
  games_played Int      @default(0)
  league       League   @relation(fields: [league_id], references: [id])
  player       Player   @relation(fields: [player_id], references: [id])

  @@unique([player_id, league_id, season])
  @@map("player_leagues")
}

/// Player rankings across different categories
model PlayerRanking {
  id         String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  player_id  String          @db.Uuid
  game_id    String          @db.Uuid
  rank       Int
  rating     Float
  region     String
  state      String
  season     String?
  category   RankingCategory
  created_at DateTime        @default(now()) @db.Timestamp(6)
  updated_at DateTime        @updatedAt
  game       Game            @relation(fields: [game_id], references: [id])
  player     Player          @relation(fields: [player_id], references: [id])

  @@unique([player_id, game_id, category, season])
  @@map("player_rankings")
}

/// Player performance statistics
model PlayerPerformanceStats {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  player_id   String   @db.Uuid
  game_id     String   @db.Uuid
  stats       Json
  match_type  String
  match_id    String?  @db.Uuid
  recorded_at DateTime @default(now()) @db.Timestamp(6)
  player      Player   @relation(fields: [player_id], references: [id])

  @@index([player_id, game_id])
  @@map("player_performance_stats")
}

/// Match tracking
model Match {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  league_id    String?     @db.Uuid
  team_a_id    String      @db.Uuid
  team_b_id    String      @db.Uuid
  scheduled_at DateTime    @db.Timestamp(6)
  played_at    DateTime?   @db.Timestamp(6)
  status       MatchStatus
  team_a_score Int?
  team_b_score Int?
  winner_id    String?     @db.Uuid
  created_at   DateTime    @default(now()) @db.Timestamp(6)
  updated_at   DateTime    @updatedAt
  league       League?     @relation(fields: [league_id], references: [id])
  team_a       Team        @relation("TeamAMatches", fields: [team_a_id], references: [id])
  team_b       Team        @relation("TeamBMatches", fields: [team_b_id], references: [id])

  @@map("matches")
}

/// Conversations between coaches and players
model Conversation {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  coach_id    String    @db.Uuid
  player_id   String    @db.Uuid
  is_starred  Boolean   @default(false)
  is_archived Boolean   @default(false)
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @updatedAt
  coach       Coach     @relation(fields: [coach_id], references: [id], onDelete: Cascade)
  player      Player    @relation(fields: [player_id], references: [id], onDelete: Cascade)
  messages    Message[]

  @@unique([coach_id, player_id])
  @@index([coach_id])
  @@index([player_id])
  @@index([updated_at])
  @@map("conversations")
}

/// Individual messages within conversations
model Message {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  conversation_id String       @db.Uuid
  sender_id       String       @db.Uuid
  sender_type     SenderType
  content         String
  is_read         Boolean      @default(false)
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @updatedAt
  conversation    Conversation @relation(fields: [conversation_id], references: [id], onDelete: Cascade)

  @@index([conversation_id])
  @@index([sender_id])
  @@index([created_at])
  @@index([is_read])
  @@map("messages")
}

/// Coach favorites/prospects system
model CoachFavorite {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  coach_id   String   @db.Uuid
  player_id  String   @db.Uuid
  notes      String?
  tags       String[]
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @updatedAt
  coach      Coach    @relation(fields: [coach_id], references: [id], onDelete: Cascade)
  player     Player   @relation(fields: [player_id], references: [id], onDelete: Cascade)

  @@unique([coach_id, player_id])
  @@index([coach_id])
  @@index([coach_id, updated_at])
  @@index([player_id])
  @@map("coach_favorites")
}

/// School announcements/feed posts
model SchoolAnnouncement {
  id          String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  school_id   String                 @db.Uuid
  author_id   String                 @db.Uuid
  title       String
  content     String
  type        SchoolAnnouncementType @default(GENERAL)
  is_pinned   Boolean                @default(false)
  is_archived Boolean                @default(false)
  created_at  DateTime               @default(now()) @db.Timestamp(6)
  updated_at  DateTime               @updatedAt
  school      School                 @relation(fields: [school_id], references: [id], onDelete: Cascade)
  author      Coach                  @relation(fields: [author_id], references: [id], onDelete: Cascade)

  @@index([school_id])
  @@index([school_id, created_at])
  @@index([school_id, type])
  @@index([school_id, is_pinned])
  @@index([created_at])
  @@map("school_announcements")
}

enum SchoolAssociationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum LeagueAssociationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum SchoolType {
  HIGH_SCHOOL
  COLLEGE
  UNIVERSITY
}

enum TeamTier {
  ELITE
  PROFESSIONAL
  COMPETITIVE
  DEVELOPMENTAL
}

enum EventType {
  ONLINE
  IN_PERSON
  HYBRID
}

enum TryoutStatus {
  DRAFT
  PUBLISHED
  CANCELLED
}

enum RegistrationStatus {
  PENDING
  CONFIRMED
  WAITLISTED
  DECLINED
  CANCELLED
}

enum CombineStatus {
  UPCOMING
  REGISTRATION_OPEN
  REGISTRATION_CLOSED
  IN_PROGRESS
  COMPLETED
}

enum LeagueTier {
  ELITE
  PROFESSIONAL
  COMPETITIVE
  DEVELOPMENTAL
}

enum LeagueStatus {
  ACTIVE
  COMPLETED
  UPCOMING
  CANCELLED
}

enum RankingCategory {
  COMBINE
  LEAGUE
  OVERALL
  TRYOUT
}

enum MatchStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  POSTPONED
}

enum SenderType {
  COACH
  PLAYER
}

enum SchoolAnnouncementType {
  GENERAL
  TRYOUT
  ACHIEVEMENT
  FACILITY
  SCHOLARSHIP
  ALUMNI
  EVENT
  SEASON_REVIEW
}
